// Code generated by counterfeiter. DO NOT EDIT.
package versionsfakes

import (
	"sync"

	"github.com/IBM/satcon-client-go/client/actions/versions"
	"github.com/IBM/satcon-client-go/client/types"
)

type FakeVersionService struct {
	AddChannelVersionStub        func(string, string, string, []byte, string, string) (*versions.AddChannelVersionResponseDataDetails, error)
	addChannelVersionMutex       sync.RWMutex
	addChannelVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
		arg5 string
		arg6 string
	}
	addChannelVersionReturns struct {
		result1 *versions.AddChannelVersionResponseDataDetails
		result2 error
	}
	addChannelVersionReturnsOnCall map[int]struct {
		result1 *versions.AddChannelVersionResponseDataDetails
		result2 error
	}
	ChannelVersionStub        func(string, string, string, string) (*types.DeployableVersion, error)
	channelVersionMutex       sync.RWMutex
	channelVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	channelVersionReturns struct {
		result1 *types.DeployableVersion
		result2 error
	}
	channelVersionReturnsOnCall map[int]struct {
		result1 *types.DeployableVersion
		result2 error
	}
	ChannelVersionByNameStub        func(string, string, string, string) (*types.DeployableVersion, error)
	channelVersionByNameMutex       sync.RWMutex
	channelVersionByNameArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	channelVersionByNameReturns struct {
		result1 *types.DeployableVersion
		result2 error
	}
	channelVersionByNameReturnsOnCall map[int]struct {
		result1 *types.DeployableVersion
		result2 error
	}
	RemoveChannelVersionStub        func(string, string, string) (*versions.RemoveChannelVersionResponseDataDetails, error)
	removeChannelVersionMutex       sync.RWMutex
	removeChannelVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeChannelVersionReturns struct {
		result1 *versions.RemoveChannelVersionResponseDataDetails
		result2 error
	}
	removeChannelVersionReturnsOnCall map[int]struct {
		result1 *versions.RemoveChannelVersionResponseDataDetails
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVersionService) AddChannelVersion(arg1 string, arg2 string, arg3 string, arg4 []byte, arg5 string, arg6 string) (*versions.AddChannelVersionResponseDataDetails, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.addChannelVersionMutex.Lock()
	ret, specificReturn := fake.addChannelVersionReturnsOnCall[len(fake.addChannelVersionArgsForCall)]
	fake.addChannelVersionArgsForCall = append(fake.addChannelVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []byte
		arg5 string
		arg6 string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	stub := fake.AddChannelVersionStub
	fakeReturns := fake.addChannelVersionReturns
	fake.recordInvocation("AddChannelVersion", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.addChannelVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVersionService) AddChannelVersionCallCount() int {
	fake.addChannelVersionMutex.RLock()
	defer fake.addChannelVersionMutex.RUnlock()
	return len(fake.addChannelVersionArgsForCall)
}

func (fake *FakeVersionService) AddChannelVersionCalls(stub func(string, string, string, []byte, string, string) (*versions.AddChannelVersionResponseDataDetails, error)) {
	fake.addChannelVersionMutex.Lock()
	defer fake.addChannelVersionMutex.Unlock()
	fake.AddChannelVersionStub = stub
}

func (fake *FakeVersionService) AddChannelVersionArgsForCall(i int) (string, string, string, []byte, string, string) {
	fake.addChannelVersionMutex.RLock()
	defer fake.addChannelVersionMutex.RUnlock()
	argsForCall := fake.addChannelVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeVersionService) AddChannelVersionReturns(result1 *versions.AddChannelVersionResponseDataDetails, result2 error) {
	fake.addChannelVersionMutex.Lock()
	defer fake.addChannelVersionMutex.Unlock()
	fake.AddChannelVersionStub = nil
	fake.addChannelVersionReturns = struct {
		result1 *versions.AddChannelVersionResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) AddChannelVersionReturnsOnCall(i int, result1 *versions.AddChannelVersionResponseDataDetails, result2 error) {
	fake.addChannelVersionMutex.Lock()
	defer fake.addChannelVersionMutex.Unlock()
	fake.AddChannelVersionStub = nil
	if fake.addChannelVersionReturnsOnCall == nil {
		fake.addChannelVersionReturnsOnCall = make(map[int]struct {
			result1 *versions.AddChannelVersionResponseDataDetails
			result2 error
		})
	}
	fake.addChannelVersionReturnsOnCall[i] = struct {
		result1 *versions.AddChannelVersionResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) ChannelVersion(arg1 string, arg2 string, arg3 string, arg4 string) (*types.DeployableVersion, error) {
	fake.channelVersionMutex.Lock()
	ret, specificReturn := fake.channelVersionReturnsOnCall[len(fake.channelVersionArgsForCall)]
	fake.channelVersionArgsForCall = append(fake.channelVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ChannelVersionStub
	fakeReturns := fake.channelVersionReturns
	fake.recordInvocation("ChannelVersion", []interface{}{arg1, arg2, arg3, arg4})
	fake.channelVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVersionService) ChannelVersionCallCount() int {
	fake.channelVersionMutex.RLock()
	defer fake.channelVersionMutex.RUnlock()
	return len(fake.channelVersionArgsForCall)
}

func (fake *FakeVersionService) ChannelVersionCalls(stub func(string, string, string, string) (*types.DeployableVersion, error)) {
	fake.channelVersionMutex.Lock()
	defer fake.channelVersionMutex.Unlock()
	fake.ChannelVersionStub = stub
}

func (fake *FakeVersionService) ChannelVersionArgsForCall(i int) (string, string, string, string) {
	fake.channelVersionMutex.RLock()
	defer fake.channelVersionMutex.RUnlock()
	argsForCall := fake.channelVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVersionService) ChannelVersionReturns(result1 *types.DeployableVersion, result2 error) {
	fake.channelVersionMutex.Lock()
	defer fake.channelVersionMutex.Unlock()
	fake.ChannelVersionStub = nil
	fake.channelVersionReturns = struct {
		result1 *types.DeployableVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) ChannelVersionReturnsOnCall(i int, result1 *types.DeployableVersion, result2 error) {
	fake.channelVersionMutex.Lock()
	defer fake.channelVersionMutex.Unlock()
	fake.ChannelVersionStub = nil
	if fake.channelVersionReturnsOnCall == nil {
		fake.channelVersionReturnsOnCall = make(map[int]struct {
			result1 *types.DeployableVersion
			result2 error
		})
	}
	fake.channelVersionReturnsOnCall[i] = struct {
		result1 *types.DeployableVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) ChannelVersionByName(arg1 string, arg2 string, arg3 string, arg4 string) (*types.DeployableVersion, error) {
	fake.channelVersionByNameMutex.Lock()
	ret, specificReturn := fake.channelVersionByNameReturnsOnCall[len(fake.channelVersionByNameArgsForCall)]
	fake.channelVersionByNameArgsForCall = append(fake.channelVersionByNameArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ChannelVersionByNameStub
	fakeReturns := fake.channelVersionByNameReturns
	fake.recordInvocation("ChannelVersionByName", []interface{}{arg1, arg2, arg3, arg4})
	fake.channelVersionByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVersionService) ChannelVersionByNameCallCount() int {
	fake.channelVersionByNameMutex.RLock()
	defer fake.channelVersionByNameMutex.RUnlock()
	return len(fake.channelVersionByNameArgsForCall)
}

func (fake *FakeVersionService) ChannelVersionByNameCalls(stub func(string, string, string, string) (*types.DeployableVersion, error)) {
	fake.channelVersionByNameMutex.Lock()
	defer fake.channelVersionByNameMutex.Unlock()
	fake.ChannelVersionByNameStub = stub
}

func (fake *FakeVersionService) ChannelVersionByNameArgsForCall(i int) (string, string, string, string) {
	fake.channelVersionByNameMutex.RLock()
	defer fake.channelVersionByNameMutex.RUnlock()
	argsForCall := fake.channelVersionByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVersionService) ChannelVersionByNameReturns(result1 *types.DeployableVersion, result2 error) {
	fake.channelVersionByNameMutex.Lock()
	defer fake.channelVersionByNameMutex.Unlock()
	fake.ChannelVersionByNameStub = nil
	fake.channelVersionByNameReturns = struct {
		result1 *types.DeployableVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) ChannelVersionByNameReturnsOnCall(i int, result1 *types.DeployableVersion, result2 error) {
	fake.channelVersionByNameMutex.Lock()
	defer fake.channelVersionByNameMutex.Unlock()
	fake.ChannelVersionByNameStub = nil
	if fake.channelVersionByNameReturnsOnCall == nil {
		fake.channelVersionByNameReturnsOnCall = make(map[int]struct {
			result1 *types.DeployableVersion
			result2 error
		})
	}
	fake.channelVersionByNameReturnsOnCall[i] = struct {
		result1 *types.DeployableVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) RemoveChannelVersion(arg1 string, arg2 string, arg3 string) (*versions.RemoveChannelVersionResponseDataDetails, error) {
	fake.removeChannelVersionMutex.Lock()
	ret, specificReturn := fake.removeChannelVersionReturnsOnCall[len(fake.removeChannelVersionArgsForCall)]
	fake.removeChannelVersionArgsForCall = append(fake.removeChannelVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RemoveChannelVersionStub
	fakeReturns := fake.removeChannelVersionReturns
	fake.recordInvocation("RemoveChannelVersion", []interface{}{arg1, arg2, arg3})
	fake.removeChannelVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVersionService) RemoveChannelVersionCallCount() int {
	fake.removeChannelVersionMutex.RLock()
	defer fake.removeChannelVersionMutex.RUnlock()
	return len(fake.removeChannelVersionArgsForCall)
}

func (fake *FakeVersionService) RemoveChannelVersionCalls(stub func(string, string, string) (*versions.RemoveChannelVersionResponseDataDetails, error)) {
	fake.removeChannelVersionMutex.Lock()
	defer fake.removeChannelVersionMutex.Unlock()
	fake.RemoveChannelVersionStub = stub
}

func (fake *FakeVersionService) RemoveChannelVersionArgsForCall(i int) (string, string, string) {
	fake.removeChannelVersionMutex.RLock()
	defer fake.removeChannelVersionMutex.RUnlock()
	argsForCall := fake.removeChannelVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVersionService) RemoveChannelVersionReturns(result1 *versions.RemoveChannelVersionResponseDataDetails, result2 error) {
	fake.removeChannelVersionMutex.Lock()
	defer fake.removeChannelVersionMutex.Unlock()
	fake.RemoveChannelVersionStub = nil
	fake.removeChannelVersionReturns = struct {
		result1 *versions.RemoveChannelVersionResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) RemoveChannelVersionReturnsOnCall(i int, result1 *versions.RemoveChannelVersionResponseDataDetails, result2 error) {
	fake.removeChannelVersionMutex.Lock()
	defer fake.removeChannelVersionMutex.Unlock()
	fake.RemoveChannelVersionStub = nil
	if fake.removeChannelVersionReturnsOnCall == nil {
		fake.removeChannelVersionReturnsOnCall = make(map[int]struct {
			result1 *versions.RemoveChannelVersionResponseDataDetails
			result2 error
		})
	}
	fake.removeChannelVersionReturnsOnCall[i] = struct {
		result1 *versions.RemoveChannelVersionResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addChannelVersionMutex.RLock()
	defer fake.addChannelVersionMutex.RUnlock()
	fake.channelVersionMutex.RLock()
	defer fake.channelVersionMutex.RUnlock()
	fake.channelVersionByNameMutex.RLock()
	defer fake.channelVersionByNameMutex.RUnlock()
	fake.removeChannelVersionMutex.RLock()
	defer fake.removeChannelVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVersionService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ versions.VersionService = new(FakeVersionService)
