// Code generated by counterfeiter. DO NOT EDIT.
package groupsfakes

import (
	"sync"

	"github.ibm.com/coligo/satcon-client/client/actions/groups"
)

type FakeGroupService struct {
	AddGroupStub        func(string, string, string) (*groups.AddGroupResponseDataDetails, error)
	addGroupMutex       sync.RWMutex
	addGroupArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	addGroupReturns struct {
		result1 *groups.AddGroupResponseDataDetails
		result2 error
	}
	addGroupReturnsOnCall map[int]struct {
		result1 *groups.AddGroupResponseDataDetails
		result2 error
	}
	GroupClustersStub        func(string, string, []string, string) (*groups.GroupClustersResponseDataDetails, error)
	groupClustersMutex       sync.RWMutex
	groupClustersArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
	}
	groupClustersReturns struct {
		result1 *groups.GroupClustersResponseDataDetails
		result2 error
	}
	groupClustersReturnsOnCall map[int]struct {
		result1 *groups.GroupClustersResponseDataDetails
		result2 error
	}
	GroupsStub        func(string, string) (groups.GroupList, error)
	groupsMutex       sync.RWMutex
	groupsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	groupsReturns struct {
		result1 groups.GroupList
		result2 error
	}
	groupsReturnsOnCall map[int]struct {
		result1 groups.GroupList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGroupService) AddGroup(arg1 string, arg2 string, arg3 string) (*groups.AddGroupResponseDataDetails, error) {
	fake.addGroupMutex.Lock()
	ret, specificReturn := fake.addGroupReturnsOnCall[len(fake.addGroupArgsForCall)]
	fake.addGroupArgsForCall = append(fake.addGroupArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddGroup", []interface{}{arg1, arg2, arg3})
	fake.addGroupMutex.Unlock()
	if fake.AddGroupStub != nil {
		return fake.AddGroupStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupService) AddGroupCallCount() int {
	fake.addGroupMutex.RLock()
	defer fake.addGroupMutex.RUnlock()
	return len(fake.addGroupArgsForCall)
}

func (fake *FakeGroupService) AddGroupCalls(stub func(string, string, string) (*groups.AddGroupResponseDataDetails, error)) {
	fake.addGroupMutex.Lock()
	defer fake.addGroupMutex.Unlock()
	fake.AddGroupStub = stub
}

func (fake *FakeGroupService) AddGroupArgsForCall(i int) (string, string, string) {
	fake.addGroupMutex.RLock()
	defer fake.addGroupMutex.RUnlock()
	argsForCall := fake.addGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGroupService) AddGroupReturns(result1 *groups.AddGroupResponseDataDetails, result2 error) {
	fake.addGroupMutex.Lock()
	defer fake.addGroupMutex.Unlock()
	fake.AddGroupStub = nil
	fake.addGroupReturns = struct {
		result1 *groups.AddGroupResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) AddGroupReturnsOnCall(i int, result1 *groups.AddGroupResponseDataDetails, result2 error) {
	fake.addGroupMutex.Lock()
	defer fake.addGroupMutex.Unlock()
	fake.AddGroupStub = nil
	if fake.addGroupReturnsOnCall == nil {
		fake.addGroupReturnsOnCall = make(map[int]struct {
			result1 *groups.AddGroupResponseDataDetails
			result2 error
		})
	}
	fake.addGroupReturnsOnCall[i] = struct {
		result1 *groups.AddGroupResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) GroupClusters(arg1 string, arg2 string, arg3 []string, arg4 string) (*groups.GroupClustersResponseDataDetails, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.groupClustersMutex.Lock()
	ret, specificReturn := fake.groupClustersReturnsOnCall[len(fake.groupClustersArgsForCall)]
	fake.groupClustersArgsForCall = append(fake.groupClustersArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
	}{arg1, arg2, arg3Copy, arg4})
	fake.recordInvocation("GroupClusters", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.groupClustersMutex.Unlock()
	if fake.GroupClustersStub != nil {
		return fake.GroupClustersStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.groupClustersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupService) GroupClustersCallCount() int {
	fake.groupClustersMutex.RLock()
	defer fake.groupClustersMutex.RUnlock()
	return len(fake.groupClustersArgsForCall)
}

func (fake *FakeGroupService) GroupClustersCalls(stub func(string, string, []string, string) (*groups.GroupClustersResponseDataDetails, error)) {
	fake.groupClustersMutex.Lock()
	defer fake.groupClustersMutex.Unlock()
	fake.GroupClustersStub = stub
}

func (fake *FakeGroupService) GroupClustersArgsForCall(i int) (string, string, []string, string) {
	fake.groupClustersMutex.RLock()
	defer fake.groupClustersMutex.RUnlock()
	argsForCall := fake.groupClustersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGroupService) GroupClustersReturns(result1 *groups.GroupClustersResponseDataDetails, result2 error) {
	fake.groupClustersMutex.Lock()
	defer fake.groupClustersMutex.Unlock()
	fake.GroupClustersStub = nil
	fake.groupClustersReturns = struct {
		result1 *groups.GroupClustersResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) GroupClustersReturnsOnCall(i int, result1 *groups.GroupClustersResponseDataDetails, result2 error) {
	fake.groupClustersMutex.Lock()
	defer fake.groupClustersMutex.Unlock()
	fake.GroupClustersStub = nil
	if fake.groupClustersReturnsOnCall == nil {
		fake.groupClustersReturnsOnCall = make(map[int]struct {
			result1 *groups.GroupClustersResponseDataDetails
			result2 error
		})
	}
	fake.groupClustersReturnsOnCall[i] = struct {
		result1 *groups.GroupClustersResponseDataDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) Groups(arg1 string, arg2 string) (groups.GroupList, error) {
	fake.groupsMutex.Lock()
	ret, specificReturn := fake.groupsReturnsOnCall[len(fake.groupsArgsForCall)]
	fake.groupsArgsForCall = append(fake.groupsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Groups", []interface{}{arg1, arg2})
	fake.groupsMutex.Unlock()
	if fake.GroupsStub != nil {
		return fake.GroupsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.groupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupService) GroupsCallCount() int {
	fake.groupsMutex.RLock()
	defer fake.groupsMutex.RUnlock()
	return len(fake.groupsArgsForCall)
}

func (fake *FakeGroupService) GroupsCalls(stub func(string, string) (groups.GroupList, error)) {
	fake.groupsMutex.Lock()
	defer fake.groupsMutex.Unlock()
	fake.GroupsStub = stub
}

func (fake *FakeGroupService) GroupsArgsForCall(i int) (string, string) {
	fake.groupsMutex.RLock()
	defer fake.groupsMutex.RUnlock()
	argsForCall := fake.groupsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGroupService) GroupsReturns(result1 groups.GroupList, result2 error) {
	fake.groupsMutex.Lock()
	defer fake.groupsMutex.Unlock()
	fake.GroupsStub = nil
	fake.groupsReturns = struct {
		result1 groups.GroupList
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) GroupsReturnsOnCall(i int, result1 groups.GroupList, result2 error) {
	fake.groupsMutex.Lock()
	defer fake.groupsMutex.Unlock()
	fake.GroupsStub = nil
	if fake.groupsReturnsOnCall == nil {
		fake.groupsReturnsOnCall = make(map[int]struct {
			result1 groups.GroupList
			result2 error
		})
	}
	fake.groupsReturnsOnCall[i] = struct {
		result1 groups.GroupList
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addGroupMutex.RLock()
	defer fake.addGroupMutex.RUnlock()
	fake.groupClustersMutex.RLock()
	defer fake.groupClustersMutex.RUnlock()
	fake.groupsMutex.RLock()
	defer fake.groupsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGroupService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groups.GroupService = new(FakeGroupService)
